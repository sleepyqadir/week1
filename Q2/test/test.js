const { expect } = require("chai");
const { ethers } = require("hardhat");
const fs = require("fs");
const { groth16, plonk } = require("snarkjs");

function unstringifyBigInts(o) {
    if ((typeof (o) == "string") && (/^[0-9]+$/.test(o))) {
        return BigInt(o);
    } else if ((typeof (o) == "string") && (/^0x[0-9a-fA-F]+$/.test(o))) {
        return BigInt(o);
    } else if (Array.isArray(o)) {
        return o.map(unstringifyBigInts);
    } else if (typeof o == "object") {
        if (o === null) return null;
        const res = {};
        const keys = Object.keys(o);
        keys.forEach((k) => {
            res[k] = unstringifyBigInts(o[k]);
        });
        return res;
    } else {
        return o;
    }
}

describe("HelloWorld", function () {
    let Verifier;
    let verifier;

    beforeEach(async function () {

        // verifier is the smart contract verifier for verifying the proof and ouput signal generated by prover
        Verifier = await ethers.getContractFactory("HelloWorldVerifier");
        verifier = await Verifier.deploy();
        await verifier.deployed();
    });

    it("Should return true for correct proof", async function () {
        //[assignment] Add comments to explain what each line is doing


        // groth16 fullProve method is used here to generate proof of the input signals and publicSignals

        const { proof, publicSignals } = await groth16.fullProve({ "a": "1", "b": "2" }, "contracts/circuits/HelloWorld/HelloWorld_js/HelloWorld.wasm", "contracts/circuits/HelloWorld/circuit_final.zkey");

        console.log('1x2 =', publicSignals[0]);

        // converting string to bigInts Number
        const editedPublicSignals = unstringifyBigInts(publicSignals);
        const editedProof = unstringifyBigInts(proof);

        // groth exportSolidityCallData is used here to generate the calldata arguments
        // that are used to verify the proof and publicSignals using solidity verifier
        const calldata = await groth16.exportSolidityCallData(editedProof, editedPublicSignals);

        // splitting the argv
        const argv = calldata.replace(/["[\]\s]/g, "").split(',').map(x => BigInt(x).toString());

        // generating 3 parameters and Input to verify in groth16 smart contract
        const a = [argv[0], argv[1]];
        const b = [[argv[2], argv[3]], [argv[4], argv[5]]];
        const c = [argv[6], argv[7]];
        const Input = argv.slice(8);

        // Here verifyProof will return true if a,b,c and input parameter is valid
        expect(await verifier.verifyProof(a, b, c, Input)).to.be.true;
    });
    it("Should return false for invalid proof", async function () {
        let a = [0, 0];
        let b = [[0, 0], [0, 0]];
        let c = [0, 0];
        let d = [0]
        expect(await verifier.verifyProof(a, b, c, d)).to.be.false;
    });
});


describe("Multiplier3 with Groth16", function () {
    let Verifier
    let verifier
    beforeEach(async function () {
        //[assignment] insert your script here

        Verifier = await ethers.getContractFactory("Multiplier3Verifier");
        verifier = await Verifier.deploy();
        await verifier.deployed();

    });

    it("Should return true for correct proof", async function () {
        //[assignment] insert your script here

        const { proof, publicSignals } = await groth16.fullProve({ "a": "5", "b": "2", "c": "5" }, "contracts/circuits/Multiplier3/Multiplier3_js/Multiplier3.wasm", "contracts/circuits/Multiplier3/circuit_final.zkey")

        console.log("5*2*5 =", publicSignals[0])

        const editedProof = unstringifyBigInts(proof)

        const editedPublicSignals = unstringifyBigInts(publicSignals);

        const calldata = await groth16.exportSolidityCallData(editedProof, editedPublicSignals);

        const argv = calldata.replace(/["[\]\s]/g, "").split(',').map(x => BigInt(x).toString());

        const a = [argv[0], argv[1]];
        const b = [[argv[2], argv[3]], [argv[4], argv[5]]];
        const c = [argv[6], argv[7]]
        const input = argv.slice(8)

        expect(await verifier.verifyProof(a, b, c, input)).to.be.true;

    });
    it("Should return false for invalid proof", async function () {
        let a = [0, 0]
        let b = [[0, 0], [0, 0]]
        let c = [0, 0]
        let d = [0]

        expect(await verifier.verifyProof(a, b, c, d)).to.be.false
    });
});


describe("Multiplier3 with PLONK", function () {
    let verifier
    let Verifier
    beforeEach(async function () {
        //[assignment] insert your script here

        Verifier = await ethers.getContractFactory("PlonkVerifier");
        verifier = await Verifier.deploy();
        await verifier.deployed();
    });

    it("Should return true for correct proof", async function () {
        //[assignment] insert your script here

        const { proof, publicSignals } = await plonk.fullProve({ "a": "6", "b": "2", "c": "7" }, "contracts/circuits/_plonkMultiplier3/Multiplier3_js/Multiplier3.wasm", "contracts/circuits/_plonkMultiplier3/circuit_final.zkey")

        console.log("6*2*7 =", publicSignals[0])

        const editedProof = unstringifyBigInts(proof)

        const editedPublicSignals = unstringifyBigInts(publicSignals);

        const calldata = await plonk.exportSolidityCallData(editedProof, editedPublicSignals)

        const argv = calldata.replace(/["[\]\s]/g, "").split(',')

        const a = argv[0]
        const b = [parseFloat(BigInt(argv[1]).toString())]


        expect(await verifier.verifyProof(a, b)).to.be.true


    });
    it("Should return false for invalid proof", async function () {
        //[assignment] insert your script here

        const { proof, publicSignals } = await plonk.fullProve({ "a": "6", "b": "2", "c": "7" }, "contracts/circuits/_plonkMultiplier3/Multiplier3_js/Multiplier3.wasm", "contracts/circuits/_plonkMultiplier3/circuit_final.zkey")

        console.log("6*2*7 !=", 55)

        const editedProof = unstringifyBigInts(proof)

        const editedPublicSignals = unstringifyBigInts(publicSignals);

        const calldata = await plonk.exportSolidityCallData(editedProof, editedPublicSignals)

        const argv = calldata.replace(/["[\]\s]/g, "").split(',')

        const a = argv[0]
        const b = [55]

        expect(await verifier.verifyProof(a, b)).to.be.false

    });
});